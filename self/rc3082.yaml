Release "rc3082" has been upgraded. Happy Helming!
NAME: rc3082
LAST DEPLOYED: Wed Mar  8 10:25:28 2023
NAMESPACE: default
STATUS: pending-upgrade
REVISION: 3
TEST SUITE: None
USER-SUPPLIED VALUES:
cluster:
  nodes: 6
  update:
    currentNumberOfNodes: 10
    delNode: true
password: password

COMPUTED VALUES:
cluster:
  externalAccess:
    enabled: false
  init: "true"
  nodes: 6
  replicas: 1
  update:
    addNodes: "false"
    currentNumberOfNodes: 10
    currentNumberOfReplicas: 1
    delNode: true
containerSecurityContext:
  enabled: false
diagnosticMode:
  args: global
  command: redis-cli --cluster check
  enabled: false
global:
  imagePullSecrets: []
  imageRegistry: ""
  redis:
    password: ""
  storageClass: ""
image:
  imagePullSecrets: defaultdocker
  pullPolicy: IfNotPresent
  repository: dongdongqiang/redis-cluster
  tag: 4.6
password: password
podSecurityContext:
  enabled: false
serviceAccount:
  create: false
  name: redis-cluster
tls:
  enabled: false
updateJob:
  activeDeadlineSeconds: 600
usePassword: true

HOOKS:
---
# Source: redis-cluster/templates/scale-down-job.yaml
apiVersion: batch/v1
kind: Job
metadata:
  name: rc3082-redis-cluster-cluster-down
  namespace: "default"
  labels:
    app.kubernetes.io/name: redis-cluster
    helm.sh/chart: redis-cluster-8.3.7
    app.kubernetes.io/instance: rc3082
    app.kubernetes.io/managed-by: Helm
  annotations:
    "helm.sh/hook": pre-upgrade
spec:
  activeDeadlineSeconds: 600
  template:
    metadata:
      labels:
        app.kubernetes.io/name: redis-cluster
        helm.sh/chart: redis-cluster-8.3.7
        app.kubernetes.io/instance: rc3082
        app.kubernetes.io/managed-by: Helm
      annotations:
    spec:
      imagePullSecrets:
      - name: dockersecret
      containers:
        - name: trigger
          image: dongdongqiang/redis-cluster:4.6
          imagePullPolicy: "IfNotPresent"
          command: ['/bin/bash', '-c']
          args:
            - |
              . /opt/pacloud/scripts/libnet.sh
              . /opt/pacloud/scripts/libos.sh
              # Backwards compatibility change
              if ! [[ -f /opt/pacloud/redis/etc/redis.conf ]]; then
                  cp /opt/pacloud/redis/etc/redis-default.conf /opt/pacloud/redis/etc/redis.conf
              fi
              firstNodeIP=$(wait_for_dns_lookup rc3082-redis-cluster-0.rc3082-redis-cluster-headless 120 5)
              # find the first node_id
              firstNodeID=$(redis-cli -a $REDISCLI_AUTH -h "$firstNodeIP" -p "$REDIS_PORT_NUMBER" cluster nodes | grep myself | awk '{print $1}')
              # number of currently deployed redis master nodes
              currentNodeOfNum=10
              for node in $(seq 6 $((10 - 1)) ); do
                delNodeIndex=$node
                delNodeIP=$(wait_for_dns_lookup "rc3082-redis-cluster-${delNodeIndex}.rc3082-redis-cluster-headless" 120 5)
                while [[ $(redis-cli  -a $REDISCLI_AUTH -h "$delNodeIP" -p "$REDIS_PORT_NUMBER" ping) != 'PONG' ]]; do
                  echo "Node $newNodeIP not ready, waiting for all the nodes to be ready..."
                  delNodeIP=$(wait_for_dns_lookup "rc3082-redis-cluster-${delNodeIndex}.rc3082-redis-cluster-headless" 120 5)
                  sleep 5
                done

                currentNodeID=$(redis-cli -a $REDISCLI_AUTH -h $delNodeIP -p $REDIS_PORT_NUMBER cluster nodes | grep myself | awk '{print $1}')
                delRedisRule=$(redis-cli -a $REDISCLI_AUTH -h $delNodeIP -p $REDIS_PORT_NUMBER cluster nodes | grep myself | awk '{print $3}' | awk -F "," '{print $2}')
                echo "find the delNodeID: $currentNodeID, delRedisRule: $delRedisRule"
                if [[ $delRedisRule == 'master' ]]; then

                  # get the slots_num on current delNode
                  slots_num=$(redis-cli -a $REDISCLI_AUTH --cluster check $firstNodeIP:$REDIS_PORT_NUMBER | grep $delNodeIP| grep slots | awk '{print $7}')
                  echo "-------current_index:$delNodeIndex ip:$delNodeIP find slots_num: $slots_num--------------"
                  # reshard slots_num to first nodes
                  redis-cli --cluster reshard $firstNodeIP:$REDIS_PORT_NUMBER --cluster-from $currentNodeID --cluster-to $firstNodeID --cluster-slots $slots_num --cluster-yes
                  echo "reshard slots_num: $slots_num to first nodes, #?"
                  # delete delNode
                  redis-cli -a $REDISCLI_AUTH --cluster del-node $firstNodeIP:$REDIS_PORT_NUMBER $currentNodeID
                  echo "delete delNode, #@?"
                else
                  # delete delNode
                  redis-cli -a $REDISCLI_AUTH --cluster del-node $firstNodeIP:$REDIS_PORT_NUMBER $currentNodeID
                  echo "delete salve delNode, #?"
                fi
                while ! redis-cli -a $REDISCLI_AUTH --cluster rebalance "${firstNodeIP}:${REDIS_PORT_NUMBER}" --cluster-use-empty-masters; do
                  echo "Rebalance failed, retrying"
                  sleep 5
                  firstNodeIP=$(wait_for_dns_lookup "rc3082-redis-cluster-0.rc3082-redis-cluster-headless" 120 5)
                  redis-cli -a $REDISCLI_AUTH --cluster fix "${firstNodeIP}:${REDIS_PORT_NUMBER}"
                done
              done
          env:
            - name: PACLOUD_DEBUG
              value: "false"
            - name: REDIS_PORT_NUMBER
              value: "6379"
            - name: REDIS_CLUSTER_REPLICAS
              value: "1"
            - name: REDISCLI_AUTH
              valueFrom:
                secretKeyRef:
                  name: rc3082-redis-cluster-secret
                  key: redis-password
      restartPolicy: OnFailure
---
# Source: redis-cluster/templates/update-job.yaml
apiVersion: batch/v1
kind: Job
metadata:
  name: rc3082-redis-cluster-cluster-update
  namespace: "default"
  labels:
    app.kubernetes.io/name: redis-cluster
    helm.sh/chart: redis-cluster-8.3.7
    app.kubernetes.io/instance: rc3082
    app.kubernetes.io/managed-by: Helm
  annotations:
    "helm.sh/hook": post-upgrade
spec:
  activeDeadlineSeconds: 600
  template:
    metadata:
      labels:
        app.kubernetes.io/name: redis-cluster
        helm.sh/chart: redis-cluster-8.3.7
        app.kubernetes.io/instance: rc3082
        app.kubernetes.io/managed-by: Helm
      annotations:
    spec:
      imagePullSecrets:
      - name: dockersecret
      containers:
        - name: trigger
          image: dongdongqiang/redis-cluster:4.6
          imagePullPolicy: "IfNotPresent"
          command: ['/bin/bash', '-c']
          args:
            - |
              . /opt/pacloud/scripts/libnet.sh
              . /opt/pacloud/scripts/libos.sh
              # Backwards compatibility change
              if ! [[ -f /opt/pacloud/redis/etc/redis.conf ]]; then
                  cp /opt/pacloud/redis/etc/redis-default.conf /opt/pacloud/redis/etc/redis.conf
              fi
              firstNodeIP=$(wait_for_dns_lookup rc3082-redis-cluster-0.rc3082-redis-cluster-headless 120 5)
              # number of currently deployed redis master nodes
              currentMasterNodesNum="$(( 10 / (( 1 + 1 )) ))"
              # end postion of new replicas that should be assigned to original redis master nodes
              slaveNodesEndPos="$(( 10 + (($REDIS_CLUSTER_REPLICAS - 1)) * $currentMasterNodesNum ))"
              for node in $(seq $((1+10)) 6); do
                newNodeIndex="$(($node - 1))"
                newNodeIP=$(wait_for_dns_lookup "rc3082-redis-cluster-${newNodeIndex}.rc3082-redis-cluster-headless" 120 5)
                while [[ $(redis-cli  -a $REDISCLI_AUTH -h "$newNodeIP" -p "$REDIS_PORT_NUMBER" ping) != 'PONG' ]]; do
                  echo "Node $newNodeIP not ready, waiting for all the nodes to be ready..."
                  newNodeIP=$(wait_for_dns_lookup "rc3082-redis-cluster-${newNodeIndex}.rc3082-redis-cluster-headless" 120 5)
                  sleep 5
                done
                slave=()
                # when the index of the new node is less than `slaveNodesEndPos`，the added node is a replica that assigned to original redis master node
                # when the index of the new node is greater than or equal to `slaveNodesEndPos`，and it is not a multiple of `$REDIS_CLUSTER_REPLICAS + 1`, the added node is a replica that assigned to newly added master node
                if (( $REDIS_CLUSTER_REPLICAS >= 1 )) && (( (( $newNodeIndex < $slaveNodesEndPos )) || (( (( $newNodeIndex >= $slaveNodesEndPos )) && (( $newNodeIndex % (( $REDIS_CLUSTER_REPLICAS + 1 )) )) )) )); then
                  slave+=("--cluster-slave")
                fi
                while ! redis-cli -a $REDISCLI_AUTH --cluster add-node "${newNodeIP}:${REDIS_PORT_NUMBER}" "${firstNodeIP}:${REDIS_PORT_NUMBER}" ${slave[@]}; do
                  echo "Add-node ${newNodeIndex} ${newNodeIP} failed, retrying"
                  sleep 5
                  firstNodeIP=$(wait_for_dns_lookup "rc3082-redis-cluster-0.rc3082-redis-cluster-headless" 120 5)
                  newNodeIP=$(wait_for_dns_lookup "rc3082-redis-cluster-${newNodeIndex}.rc3082-redis-cluster-headless" 120 5)
                done
              done
              while ! redis-cli -a $REDISCLI_AUTH --cluster rebalance "${firstNodeIP}:${REDIS_PORT_NUMBER}" --cluster-use-empty-masters; do
                echo "Rebalance failed, retrying"
                sleep 5
                firstNodeIP=$(wait_for_dns_lookup "rc3082-redis-cluster-0.rc3082-redis-cluster-headless" 120 5)
                redis-cli -a $REDISCLI_AUTH --cluster fix "${firstNodeIP}:${REDIS_PORT_NUMBER}"
              done
          env:
            - name: PACLOUD_DEBUG
              value: "false"
            - name: REDIS_PORT_NUMBER
              value: "6379"
            - name: REDIS_CLUSTER_REPLICAS
              value: "1"
            - name: REDISCLI_AUTH
              valueFrom:
                secretKeyRef:
                  name: rc3082-redis-cluster-secret
                  key: redis-password
      restartPolicy: OnFailure
MANIFEST:
---
# Source: redis-cluster/templates/secret.yaml
apiVersion: v1
kind: Secret
metadata:
  # name: rc23-redis-cluster-secret
  name: rc3082-redis-cluster-secret
  namespace: default
  labels:
    app.kubernetes.io/name: rc3082-redis-cluster
type: Opaque
data:
  redis-password: "cGFzc3dvcmQ="
---
# Source: redis-cluster/templates/service-headless.yaml
apiVersion: v1
kind: Service
metadata:
  name: rc3082-redis-cluster-headless
  namespace: default
  labels:
    app.kubernetes.io/name: rc3082
    app.kubernetes.io/instance: rc3082-redis-cluster
spec:
  type: ClusterIP
  clusterIP: None
  ports:
    - name: redis
      port: 6379
      targetPort: tcp-redis
    - name: redis-cluster
      port: 16379
      targetPort: redis-cluster
  selector:
    app.kubernetes.io/name: rc3082
    app.kubernetes.io/instance: rc3082-redis-cluster
---
# Source: redis-cluster/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: rc3082-redis-cluster-svc
  namespace: default
  labels:
    app.kubernetes.io/name: rc3082
    app.kubernetes.io/instance: rc3082-redis-cluster
spec:
  type: ClusterIP
  ports:
    - name: redis
      port: 6379
      targetPort: tcp-redis
    - name: redis-cluster
      port: 16379
      targetPort: redis-cluster
  selector:
    app.kubernetes.io/name: rc3082
    app.kubernetes.io/instance: rc3082-redis-cluster
---
# Source: redis-cluster/templates/redis-cluster-sts.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: rc3082-redis-cluster
  namespace: default
  labels:
    app.kubernetes.io/name: rc3082
    app.kubernetes.io/instance: rc3082-redis-cluster
spec:
  replicas: 6
  podManagementPolicy: Parallel
  selector:
    matchLabels:
      app.kubernetes.io/name: rc3082
      app.kubernetes.io/instance: rc3082-redis-cluster
  serviceName: rc3082-redis-cluster-headless
  template:
    metadata:
      labels:
        app.kubernetes.io/name: rc3082
        app.kubernetes.io/instance: rc3082-redis-cluster
    spec:
      imagePullSecrets:
        - name: defaultdocker
      containers:
        - name: redis-cluster
          image: dongdongqiang/redis-cluster:4.6
          imagePullPolicy: "IfNotPresent"
          env:
            - name: REDIS_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: rc3082-redis-cluster-secret
                  key: redis-password
            - name: REDIS_CLUSTER_ANNOUNCE_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
            - name: REDIS_CLUSTER_ANNOUNCE_PORT
              value: "6379"
            - name: replicas
              value: "1"
            - name: REDIS_NODES
              value: 'rc3082-redis-cluster-0.rc3082-redis-cluster-headless rc3082-redis-cluster-1.rc3082-redis-cluster-headless rc3082-redis-cluster-2.rc3082-redis-cluster-headless rc3082-redis-cluster-3.rc3082-redis-cluster-headless rc3082-redis-cluster-4.rc3082-redis-cluster-headless rc3082-redis-cluster-5.rc3082-redis-cluster-headless '
            - name: REDIS_CLUSTER_ANNOUNCE_BUS_PORT
              value: "16379"
            - name: REDIS_CLUSTER_REPLICAS
              value: "1"
            - name: REDIS_CLUSTER_DNS
              value: "cluster-srv"
            - name: REDIS_CLUSTER_DNS_TTL
              value: "30"
            - name: REDIS_CLUSTER_DNS_REFRESH
              value: "10"
            - name: REDIS_CLUSTER_DNS_RETRIES
              value: "5"
            - name: REDIS_CLUSTER_DNS_TIMEOUT
              value: "2"
            - name: REDIS_CLUSTER_DNS_NOT_FOUND_TTL
              value: "15"
            - name: REDIS_CLUSTER_DNS_UPDATE_INTERVAL
              value: "60"
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
          # resources:
          #   requests:
          #     memory: 256Mi
          #     cpu: 250m
          #   limits:
          #     memory: 256Mi
          #     cpu: 250m
          command:
            - "/bin/bash"
            - "-c"
          args:
            - |
              # Backwards compatibility change
              if ! [[ -f /opt/pacloud/redis/etc/redis.conf ]]; then
                  echo COPYING FILE
                  cp  /opt/pacloud/redis/etc/redis-default.conf /opt/pacloud/redis/etc/redis.conf
              fi
              pod_index=($(echo "$POD_NAME" | tr "-" "\n"))
              pod_index="${pod_index[-1]}"
              if [[ "$pod_index" == "0" ]]; then
                export REDIS_CLUSTER_CREATOR="yes"
                export REDIS_CLUSTER_REPLICAS="1"
              fi
              /opt/pacloud/scripts/redis-cluster/entrypoint.sh /opt/pacloud/scripts/redis-cluster/run.sh
          ports:
          - name: tcp-redis
            containerPort: 6379
          volumeMounts:
          # - mountPath: /opt/pacloud/redis/etc/redis.conf
            # name: redis-tmp-conf
          - mountPath: /pacloud/redis/data
            name: redis-data

  volumeClaimTemplates:
  - metadata:
      name: redis-data
      labels:
        app.kubernetes.io/instance: rc3082-redis-cluster
        app.kubernetes.io/name: rc3082
    spec:
      resources:
        requests:
          storage: 8Gi
      accessModes:
      - ReadWriteOnce

