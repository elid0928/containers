image:
  #repository: redis-cluster
  repository: dongdongqiang/redis-cluster
  tag: release-1
  pullPolicy: IfNotPresent
  imagePullSecrets: defaultdocker
global:
  imageRegistry: ""
  ## E.g.
  ## imagePullSecrets:
  ##   - myRegistryKeySecretName
  ##
  imagePullSecrets: []
  storageClass: ""
  redis:
    password: ""
cluster:
  nodes: 6
  init: "true"
  replicas: 1
  update:
    addNodes: "false"
    currentNumberOfNodes: 16
    currentNumberOfReplicas: 1
  externalAccess:
    enabled: false



redis:
  resource:
    requests:
      cpu: 256m
      memory: 250Mi
    limits:
      cpu: 512m
      memory: 512Mi
  affinity:
    nodeAffinity:
      enabled: true
      # requiredDuringSchedulingIgnoredDuringExecution:
      #   nodeSelectorTerms:
      #   - matchExpressions:
      #     - key: topology.kubernetes.io/database-type
      #       operator: In
      #       values:
      #       - mysql
      #       - redis-cluster
      preferredDuringSchedulingIgnoredDuringExecution:
      - weight: 1
        preference:
          matchExpressions:
          - key: topology.kubernetes.io/zone
            operator: In
            values:
            - us-central1-c
    podAffinity:
      enabled: true
      preferredDuringSchedulingIgnoredDuringExecution:
      - weight: 100
        podAffinityTerm:
          labelSelector:
            matchExpressions:
            - key: app
              operator: In
              values:
              - redis-cluster
          topologyKey: kubernetes.io/hostname
    podAntiAffinity:
      enabled: false
      requiredDuringSchedulingIgnoredDuringExecution:
      - labelSelector:
          matchExpressions:
          - key: app
            operator: In
            values:
            - redis-cluster
        topologyKey: kubernetes.io/hostname
  readinessProbe:
    enabled: false
    initialDelaySeconds: 5
    periodSeconds: 10
    timeoutSeconds: 5
    successThreshold: 1
    failureThreshold: 3
  livenessProbe:
    enabled: false
    initialDelaySeconds: 15
    periodSeconds: 10
    timeoutSeconds: 5
    successThreshold: 1
    failureThreshold: 3
  nodeSelector:
    cass_cluster: "redis-cluster"
    hostcluster: "144"
  tolerations: []

# 而 podManagementPolicy 参数可以控制 StatefulSet 中管理 Pod 的策略，有两种可选值：Parallel 和 OrderedReady。
# Parallel 表示实例化多个 Pod 的顺序是并行的（即同时创建多个 Pod），不需要等待之前的 Pod 创建完成。
# OrderedReady 表示实例化多个 Pod 的顺序是有序的，并且之后的 Pod 的启动需要等待之前的 Pod 启动成功以后再进行。
# 
# podManagementPolicy:
#   - Parallel
  defaultConfigOverride: ""
    # cluster-enabled: "yes"
    # cluster-config-file: "nodes.conf"
    # cluster-node-timeout: 5000
    # appendonly: "yes"
    # appendfsync: "everysec"
    # no-appendfsync-on-rewrite: "no"
    # auto-aof-rewrite-percentage: 100
    # auto-aof-rewrite-min-size: 64mb
    # aof-load-truncated: "yes"
    # aof-use-rdb-preamble: "yes"
    # rdbchecksum: "yes"
    # rdbcompression: "yes"
rbac:
  create: false
  role:
    rules: ""
usePassword: true

diagnosticMode:
  enabled: false
  command: "redis-cli --cluster check"
  args: "global"
tls:
  enabled: false
updateJob:
  ## @param updateJob.activeDeadlineSeconds Number of seconds the Job to create the cluster will be waiting for the Nodes to be ready.
  ##
  activeDeadlineSeconds: 600
podSecurityContext:
  enabled: false

containerSecurityContext: 
  enabled: false

serviceAccount:
  create: false
  name: redis-cluster

podSecurityPolicy:
  enabled: false
  name: redis-cluster