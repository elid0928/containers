{{- if .Values.cluster.update.delNode }}
apiVersion: batch/v1
kind: Job
metadata:
  name: {{ template "common.names.fullname" . }}-cluster-down
  namespace: {{ .Release.Namespace | quote }}
  labels: {{- include "common.labels.standard" . | nindent 4 }}
    {{- if .Values.commonLabels }}
    {{- include "common.tplvalues.render" ( dict "value" .Values.commonLabels "context" $ ) | nindent 4 }}
    {{- end }}
  annotations:
    "helm.sh/hook": pre-upgrade
    {{- if .Values.updateJob.annotations }}
    {{- include "common.tplvalues.render" ( dict "value" .Values.updateJob.annotations "context" $ ) | nindent 4 }}
    {{- end }}
    {{- if .Values.commonAnnotations }}
    {{- include "common.tplvalues.render" ( dict "value" .Values.commonAnnotations "context" $ ) | nindent 4 }}
    {{- end }}
spec:
  activeDeadlineSeconds: {{ .Values.updateJob.activeDeadlineSeconds }}
  template:
    metadata:
      labels: {{- include "common.labels.standard" . | nindent 8 }}
        {{- if .Values.commonLabels }}
        {{- include "common.tplvalues.render" ( dict "value" .Values.commonLabels "context" $ ) | nindent 8 }}
        {{- end }}
        {{- if .Values.updateJob.podLabels }}
        {{- include "common.tplvalues.render" (dict "value" .Values.updateJob.podLabels "context" $) | nindent 8 }}
        {{- end }}
      annotations:
        {{- if .Values.commonAnnotations }}
        {{- include "common.tplvalues.render" (dict "value" .Values.commonAnnotations "context" $) | nindent 8 }}
        {{- end }}
        {{- if .Values.updateJob.podAnnotations }}
        {{- include "common.tplvalues.render" (dict "value" .Values.updateJob.podAnnotations "context" $) | nindent 8 }}
        {{- end }}
    spec:
      imagePullSecrets:
      - name: dockersecret
      {{- if .Values.updateJob.hostAliases }}
      hostAliases: {{- include "common.tplvalues.render" (dict "value" .Values.updateJob.hostAliases "context" $) | nindent 8 }}
      {{- end }}
 
      {{- if .Values.updateJob.nodeSelector }}
      nodeSelector: {{- include "common.tplvalues.render" (dict "value" .Values.updateJob.nodeSelector "context" $) | nindent 8 }}
      {{- end }}
      {{- if .Values.updateJob.tolerations }}
      tolerations: {{- include "common.tplvalues.render" (dict "value" .Values.updateJob.tolerations "context" $) | nindent 8 }}
      {{- end }}
      {{- if .Values.updateJob.priorityClassName }}
      priorityClassName: {{ .Values.updateJob.priorityClassName }}
      {{- end }}
      {{- if .Values.podSecurityContext.enabled }}
      securityContext: {{- omit .Values.podSecurityContext "enabled" | toYaml | nindent 8 }}
      {{- end }}
      {{- if .Values.updateJob.initContainers }}
      initContainers: {{- include "common.tplvalues.render" (dict "value" .Values.updateJob.initContainers "context" $) | nindent 8 }}
      {{- end }}
      containers:
        - name: trigger
          image: {{ .Values.image.repository}}:{{ .Values.image.tag }}
          imagePullPolicy: {{ .Values.image.pullPolicy | quote }}
          {{- if .Values.containerSecurityContext.enabled }}
          securityContext: {{- omit .Values.containerSecurityContext "enabled" | toYaml | nindent 12 }}
          {{- end }}
          {{- if .Values.diagnosticMode.enabled }}
          command: {{- include "common.tplvalues.render" (dict "value" .Values.diagnosticMode.command "context" $) | nindent 12 }}
          {{- else if .Values.updateJob.command }}
          command: {{- include "common.tplvalues.render" (dict "value" .Values.updateJob.command "context" $) | nindent 12 }}
          {{- else }}
          command: ['/bin/bash', '-c']
          {{- end }}
          {{- if .Values.diagnosticMode.enabled }}
          args: {{- include "common.tplvalues.render" (dict "value" .Values.diagnosticMode.args "context" $) | nindent 12 }}
          {{- else if .Values.updateJob.args }}
          args: {{- include "common.tplvalues.render" (dict "value" .Values.updateJob.args "context" $) | nindent 12 }}
          {{- else }}
          args:
            - |
              . /opt/pacloud/scripts/libnet.sh
              . /opt/pacloud/scripts/libos.sh
              # Backwards compatibility change
              if ! [[ -f /opt/pacloud/redis/etc/redis.conf ]]; then
                  cp /opt/pacloud/redis/etc/redis-default.conf /opt/pacloud/redis/etc/redis.conf
              fi
              firstNodeIP=$(wait_for_dns_lookup {{ template "common.names.fullname" . }}-0.{{ template "common.names.fullname" . }}-headless 120 5)
              # find the first node_id
              firstNodeID=$(redis-cli -a $REDISCLI_AUTH -h "$firstNodeIP" -p "$REDIS_PORT_NUMBER" cluster nodes | grep myself | awk '{print $1}')
              # number of currently deployed redis master nodes
              currentNodeOfNum={{ .Values.cluster.update.currentNumberOfNodes }}
              for node in $(seq {{ .Values.cluster.nodes }} $(({{ .Values.cluster.update.currentNumberOfNodes }} - 1)) ); do
                delNodeIndex=$node
                delNodeIP=$(wait_for_dns_lookup "{{ template "common.names.fullname" . }}-${delNodeIndex}.{{ template "common.names.fullname" . }}-headless" 120 5)
                while [[ $(redis-cli  -a $REDISCLI_AUTH -h "$delNodeIP" -p "$REDIS_PORT_NUMBER" ping) != 'PONG' ]]; do
                  echo "Node $newNodeIP not ready, waiting for all the nodes to be ready..."
                  delNodeIP=$(wait_for_dns_lookup "{{ template "common.names.fullname" . }}-${delNodeIndex}.{{ template "common.names.fullname" . }}-headless" 120 5)
                  sleep 5
                done

                currentNodeID=$(redis-cli -a $REDISCLI_AUTH -h $delNodeIP -p $REDIS_PORT_NUMBER cluster nodes | grep myself | awk '{print $1}')
                delRedisRule=$(redis-cli -a $REDISCLI_AUTH -h $delNodeIP -p $REDIS_PORT_NUMBER cluster nodes | grep myself | awk '{print $3}' | awk -F "," '{print $2}')
                echo "find the delNodeID: $currentNodeID, delRedisRule: $delRedisRule"
                if [[ $delRedisRule == 'master' ]]; then

                  # get the slots_num on current delNode
                  slots_num=$(redis-cli -a $REDISCLI_AUTH --cluster check $firstNodeIP:$REDIS_PORT_NUMBER | grep $delNodeIP| grep slots | awk '{print $7}')
                  echo "-------current_index:$delNodeIndex ip:$delNodeIP find slots_num: $slots_num--------------"
                  # reshard slots_num to first nodes
                  redis-cli --cluster reshard $firstNodeIP:$REDIS_PORT_NUMBER --cluster-from $currentNodeID --cluster-to $firstNodeID --cluster-slots $slots_num --cluster-yes
                  echo "reshard slots_num: $slots_num to first nodes, #?"
                  # delete delNode
                  redis-cli -a $REDISCLI_AUTH --cluster del-node $firstNodeIP:$REDIS_PORT_NUMBER $currentNodeID
                  echo "delete delNode, #@?"
                else
                  # delete delNode
                  redis-cli -a $REDISCLI_AUTH --cluster del-node $firstNodeIP:$REDIS_PORT_NUMBER $currentNodeID
                  echo "delete salve delNode, #?"
                fi
                while ! redis-cli -a $REDISCLI_AUTH --cluster rebalance "${firstNodeIP}:${REDIS_PORT_NUMBER}" --cluster-use-empty-masters; do
                  echo "Rebalance failed, retrying"
                  sleep 5
                  firstNodeIP=$(wait_for_dns_lookup "{{ template "common.names.fullname" . }}-0.{{ template "common.names.fullname" . }}-headless" 120 5)
                  redis-cli -a $REDISCLI_AUTH --cluster fix "${firstNodeIP}:${REDIS_PORT_NUMBER}"
                done
              done

              

          {{- end }}
          env:
            - name: PACLOUD_DEBUG
              value: {{ ternary "true" "false" (or .Values.image.debug .Values.diagnosticMode.enabled) | quote }}
            {{- if .Values.cluster.externalAccess.enabled }}
            {{- if .Values.tls.enabled }}
            - name:  REDIS_TLS_CERT_FILE
              value: {{ template "redis-cluster.tlsCert" . }}
            - name:  REDIS_TLS_KEY_FILE
              value: {{ template "redis-cluster.tlsCertKey" . }}
            - name:  REDIS_TLS_CA_FILE
              value: {{ template "redis-cluster.tlsCACert" . }}
            - name: REDIS_TLS_PORT_NUMBER
            {{- else }}
            - name: REDIS_PORT_NUMBER
            {{- end }}
              value: {{ .Values.cluster.externalAccess.service.port | quote }}
            {{- else }}
            {{- if .Values.tls.enabled }}
            - name:  REDIS_TLS_CERT_FILE
              value: {{ template "redis-cluster.tlsCert" . }}
            - name:  REDIS_TLS_KEY_FILE
              value: {{ template "redis-cluster.tlsCertKey" . }}
            - name:  REDIS_TLS_CA_FILE
              value: {{ template "redis-cluster.tlsCACert" . }}
            - name: REDIS_TLS_PORT_NUMBER
            {{- else }}
            - name: REDIS_PORT_NUMBER
            {{- end }}
              value: "6379"
            {{- end }}
            - name: REDIS_CLUSTER_REPLICAS
              value: {{ .Values.cluster.replicas | quote }}
            {{- if .Values.usePassword }}
            - name: REDISCLI_AUTH
              valueFrom:
                secretKeyRef:
                  name: {{ .Release.Name }}-redis-cluster-secret
                  key: redis-password
            {{- end }}
            {{- if .Values.updateJob.extraEnvVars }}
            {{- include "common.tplvalues.render" (dict "value" .Values.updateJob.extraEnvVars "context" $) | nindent 12 }}
            {{- end }}
          {{- if or .Values.updateJob.extraEnvVarsCM .Values.updateJob.extraEnvVarsSecret }}
          envFrom:
            {{- if .Values.updateJob.extraEnvVarsCM }}
            - configMapRef:
                name: {{ include "common.tplvalues.render" (dict "value" .Values.updateJob.extraEnvVarsCM "context" $) }}
            {{- end }}
            {{- if .Values.updateJob.extraEnvVarsSecret }}
            - secretRef:
                name: {{ include "common.tplvalues.render" (dict "value" .Values.updateJob.extraEnvVarsSecret "context" $) }}
            {{- end }}
          {{- end }}
          {{- if .Values.updateJob.resources }}
          resources: {{- toYaml .Values.updateJob.resources | nindent 12 }}
          {{- end }}
          {{- if or .Values.tls.enabled .Values.updateJob.extraVolumeMounts }}
          volumeMounts:
            {{- if .Values.tls.enabled }}
            - name: redis-certificates
              mountPath: /opt/pacloud/redis/certs
              readOnly: true
            {{- end }}
            {{- if .Values.updateJob.extraVolumeMounts }}
            {{- include "common.tplvalues.render" (dict "value" .Values.updateJob.extraVolumeMounts "context" $) | nindent 12 }}
            {{- end }}
          {{- end }}
      restartPolicy: OnFailure
      {{- if or .Values.tls.enabled .Values.updateJob.extraVolumes }}
      volumes:
      {{- if .Values.tls.enabled }}
        - name: redis-certificates
          secret:
            secretName: {{ include "common.tplvalues.render" (dict "value" .Values.tls.certificatesSecret "context" $) }}
      {{- end }}
      {{- if .Values.updateJob.extraVolumes }}
      {{- include "common.tplvalues.render" (dict "value" .Values.updateJob.extraVolumes "context" $) | nindent 6 }}
      {{- end }}
      {{- end }}
{{- end }}

