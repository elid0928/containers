apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ include "common.names.fullname" $ }}
  namespace: {{ .Release.Namespace }}
  labels:
    app.kubernetes.io/name: {{ .Release.Name }}
    app.kubernetes.io/instance: {{ .Release.Name }}-redis-cluster
spec:
  replicas: {{ .Values.cluster.nodes }}
  podManagementPolicy: Parallel
  selector:
    matchLabels:
      app.kubernetes.io/name: {{ .Release.Name }}
      app.kubernetes.io/instance: {{ .Release.Name }}-redis-cluster
  serviceName: {{ include "common.names.fullname" $ }}-headless
  template:
    metadata:
      labels:
        app.kubernetes.io/name: {{ .Release.Name }}
        app.kubernetes.io/instance: {{ .Release.Name }}-redis-cluster
        app: redis-cluster
    spec:
    {{- if .Values.rbac.create }}
      serviceAccountName: {{ include "redis-cluster.serviceAccountName" . }}
    {{- end }}
      imagePullSecrets:
        - name: defaultdocker
      
      affinity:
      {{- if .Values.redis.affinity.podAffinity.enabled }}
        podAffinity: {{- omit .Values.redis.affinity.podAffinity "enabled" | toYaml | nindent 10 }}
      {{- end }}
      {{- if .Values.redis.affinity.podAntiAffinity.enabled }}
        podAntiAffinity: {{- omit .Values.redis.affinity.podAntiAffinity "enabled" | toYaml | nindent 10 }}
      {{- end }}
      {{- if .Values.redis.affinity.nodeAffinity.enabled }}
        nodeAffinity: {{- omit .Values.redis.affinity.nodeAffinity "enabled" | toYaml | nindent 10 }}
      {{- end }}
      {{- if .Values.redis.nodeSelector }}
      nodeSelector: 
      {{ toYaml .Values.redis.nodeSelector | indent 8 }}
      {{- end }}
      {{- if .Values.redis.tolerations }}
      tolerations: {{- include "common.tplvalues.render" (dict "value" .Values.redis.tolerations "context" $) | nindent 8 }}
      {{- end }}
      containers:
        - name: redis-cluster
          image: {{ .Values.image.repository}}:{{ .Values.image.tag }}
          imagePullPolicy: "IfNotPresent"
          env:
            - name: REDIS_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ .Release.Name }}-redis-cluster-secret
                  key: redis-password
            - name: REDIS_CLUSTER_ANNOUNCE_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
            - name: REDIS_CLUSTER_ANNOUNCE_PORT
              value: "6379"
            - name: replicas
              value: "1"
            - name: REDIS_NODES
              value: '{{ $count := .Values.cluster.nodes | int }}{{ range $i, $v := until $count }}{{ include "common.names.fullname" $ }}-{{ $i }}.{{ template "common.names.fullname" $ }}-headless {{ end }}'
            - name: REDIS_CLUSTER_ANNOUNCE_BUS_PORT
              value: "16379"
            - name: REDIS_CLUSTER_REPLICAS
              value: "1"
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
          {{- if .Values.redis.resources }}
          resources:
          {{- include "common.tplvalues.render" (dict "value" .Values.redis.resources "context" $) | nindent 12 }}
          {{- end }}

          {{- if .Values.redis.livenessProbe.enabled }}
          livenessProbe:
            exec:
              command:
              - /bin/bash
              - -c
              - /scripts/ping_liveness_local.sh {{ .Values.redis.livenessProbe.timeoutSeconds }}
            initialDelaySeconds: {{ .Values.redis.livenessProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.redis.livenessProbe.periodSeconds }}
            timeoutSeconds: {{ .Values.redis.livenessProbe.timeoutSeconds }}
            successThreshold: {{ .Values.redis.livenessProbe.successThreshold }}
            failureThreshold: {{ .Values.redis.livenessProbe.failureThreshold }}
          {{- end }}
          {{- if .Values.redis.readinessProbe.enabled }}
          readinessProbe:
            exec:
              command:
              - /bin/bash
              - -c
              - /scripts/ping_readiness_local.sh {{ .Values.redis.readinessProbe.timeoutSeconds }}
            initialDelaySeconds: {{ .Values.redis.readinessProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.redis.readinessProbe.periodSeconds }}
            timeoutSeconds: {{ .Values.redis.readinessProbe.timeoutSeconds }}
            successThreshold: {{ .Values.redis.readinessProbe.successThreshold }}
            failureThreshold: {{ .Values.redis.readinessProbe.failureThreshold }}
          {{- end }}
          # resources:
          #   requests:
          #     memory: 256Mi
          #     cpu: 250m
          #   limits:
          #     memory: 256Mi
          #     cpu: 250m
          command:
            - "/bin/bash"
            - "-c"
          args:
            - |
              # Backwards compatibility change
              if ! [[ -f /opt/pacloud/redis/etc/redis.conf ]]; then
                  echo COPYING FILE
                  cp  /opt/pacloud/redis/etc/redis-default.conf /opt/pacloud/redis/etc/redis.conf
              fi
              {{- if .Values.cluster.init }}
              pod_index=($(echo "$POD_NAME" | tr "-" "\n"))
              pod_index="${pod_index[-1]}"
              if [[ "$pod_index" == "0" ]]; then
                export REDIS_CLUSTER_CREATOR="yes"
                export REDIS_CLUSTER_REPLICAS="1"
              fi
              {{- end }}
              /opt/pacloud/scripts/redis-cluster/entrypoint.sh /opt/pacloud/scripts/redis-cluster/run.sh
          ports:
          - name: tcp-redis
            containerPort: 6379
          volumeMounts:
          # - mountPath: /opt/pacloud/redis/etc/redis.conf
            # name: redis-tmp-conf
          - mountPath: /pacloud/redis/data
            name: redis-data
          - name: default-config
            mountPath: /opt/pacloud/redis/etc/redis-default.conf
            subPath: redis-default.conf
      volumes:
      - name: default-config
        configMap:
            name: {{ include "common.names.fullname" . }}-default

  volumeClaimTemplates:
  - metadata:
      name: redis-data
      labels:
        app.kubernetes.io/instance: {{ .Release.Name }}-redis-cluster
        app.kubernetes.io/name: {{ .Release.Name }}
    spec:
      resources:
        requests:
          storage: 8Gi
      accessModes:
      - ReadWriteOnce

        
          
    